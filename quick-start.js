#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ CyberSec Hub Forum - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫');
console.log('=====================================\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if (!fs.existsSync('.env')) {
    console.log('‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –≤ README_SETUP.md');
    console.log('');
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª
    const envContent = `# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT=3000
NODE_ENV=development

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
DB_HOST=localhost
DB_PORT=5432
DB_NAME=cybersec_forum
DB_USER=cybersec_user
DB_PASSWORD=secure_password_here

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–ó–ú–ï–ù–ò–¢–ï!)
JWT_SECRET=your_super_secret_jwt_key_minimum_32_characters_long_please_change_this
SESSION_SECRET=your_super_secret_session_key_minimum_32_characters_long_please_change_this
ENCRYPTION_KEY=your_super_secret_encryption_key_minimum_32_chars_please_change_this

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
BCRYPT_ROUNDS=12
MAX_LOGIN_ATTEMPTS=5
LOCKOUT_TIME=900000

# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASSWORD=your_app_password
`;

    fs.writeFileSync('.env', envContent);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª .env');
    console.log('üîë –í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏!');
    console.log('');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è node_modules
if (!fs.existsSync('node_modules')) {
    console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    const install = spawn('npm', ['install'], { stdio: 'inherit' });
    
    install.on('close', (code) => {
        if (code === 0) {
            console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            startApplication();
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
            process.exit(1);
        }
    });
} else {
    startApplication();
}

function startApplication() {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    checkPostgreSQL();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    checkRedis();
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    setTimeout(() => {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
        const server = spawn('node', ['server.js'], { stdio: 'inherit' });
        
        server.on('close', (code) => {
            console.log(`\nüî¥ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º ${code}`);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        process.on('SIGINT', () => {
            console.log('\nüî¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
            server.kill('SIGINT');
        });
        
        process.on('SIGTERM', () => {
            console.log('\nüî¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
            server.kill('SIGTERM');
        });
    }, 2000);
}

function checkPostgreSQL() {
    const { spawn } = require('child_process');
    const psql = spawn('psql', ['--version'], { stdio: 'pipe' });
    
    psql.on('close', (code) => {
        if (code === 0) {
            console.log('‚úÖ PostgreSQL –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
        } else {
            console.log('‚ö†Ô∏è  PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            console.log('üìñ –°–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ README_SETUP.md');
        }
    });
    
    psql.on('error', () => {
        console.log('‚ö†Ô∏è  PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üìñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL: https://www.postgresql.org/download/');
    });
}

function checkRedis() {
    const { spawn } = require('child_process');
    const redis = spawn('redis-cli', ['ping'], { stdio: 'pipe' });
    
    redis.on('close', (code) => {
        if (code === 0) {
            console.log('‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
            console.log('‚ö†Ô∏è  Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
            console.log('üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis: redis-server');
        }
    });
    
    redis.on('error', () => {
        console.log('‚ö†Ô∏è  Redis –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üìñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: https://redis.io/download');
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
    process.exit(1);
}); 