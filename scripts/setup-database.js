const { Pool } = require('pg');
const config = require('../config/config');

const pool = new Pool({
    user: config.database.user,
    host: config.database.host,
    database: 'postgres', // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—à–µ–π –±–∞–∑—ã
    password: config.database.password,
    port: config.database.port,
});

const setupDatabase = async () => {
    try {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await pool.query(`CREATE DATABASE ${config.database.name};`);
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${config.database.name} —Å–æ–∑–¥–∞–Ω–∞`);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–æ–π
        await pool.end();

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const appPool = new Pool({
            user: config.database.user,
            host: config.database.host,
            database: config.database.name,
            password: config.database.password,
            port: config.database.port,
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        await appPool.query(`CREATE EXTENSION IF NOT EXISTS "uuid-ossp";`);
        await appPool.query(`CREATE EXTENSION IF NOT EXISTS "pgcrypto";`);
        console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        const createTables = `
            -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                email VARCHAR(100) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                role VARCHAR(20) DEFAULT 'user',
                is_active BOOLEAN DEFAULT true,
                email_verified BOOLEAN DEFAULT false,
                two_factor_enabled BOOLEAN DEFAULT false,
                two_factor_secret VARCHAR(255),
                avatar_url VARCHAR(255),
                reputation INTEGER DEFAULT 0,
                last_login TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                failed_login_attempts INTEGER DEFAULT 0,
                locked_until TIMESTAMP,
                reset_token VARCHAR(255),
                reset_token_expires TIMESTAMP,
                verification_token VARCHAR(255),
                verification_token_expires TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ–æ—Ä—É–º–∞
            CREATE TABLE IF NOT EXISTS categories (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                color VARCHAR(7) DEFAULT '#00ff41',
                icon VARCHAR(50),
                sort_order INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º —Ñ–æ—Ä—É–º–∞
            CREATE TABLE IF NOT EXISTS topics (
                id SERIAL PRIMARY KEY,
                title VARCHAR(200) NOT NULL,
                content TEXT NOT NULL,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                category_id INTEGER REFERENCES categories(id) ON DELETE CASCADE,
                is_pinned BOOLEAN DEFAULT false,
                is_hot BOOLEAN DEFAULT false,
                is_locked BOOLEAN DEFAULT false,
                views INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤
            CREATE TABLE IF NOT EXISTS replies (
                id SERIAL PRIMARY KEY,
                content TEXT NOT NULL,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                topic_id INTEGER REFERENCES topics(id) ON DELETE CASCADE,
                parent_id INTEGER REFERENCES replies(id) ON DELETE CASCADE,
                is_solution BOOLEAN DEFAULT false,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –ª–∞–π–∫–æ–≤
            CREATE TABLE IF NOT EXISTS likes (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                topic_id INTEGER REFERENCES topics(id) ON DELETE CASCADE,
                reply_id INTEGER REFERENCES replies(id) ON DELETE CASCADE,
                is_like BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, topic_id, reply_id)
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            CREATE TABLE IF NOT EXISTS user_activity (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                activity_type VARCHAR(50) NOT NULL,
                ip_address INET,
                user_agent TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
            CREATE TABLE IF NOT EXISTS sessions (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                session_token VARCHAR(255) UNIQUE NOT NULL,
                ip_address INET,
                user_agent TEXT,
                expires_at TIMESTAMP NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            CREATE TABLE IF NOT EXISTS security_logs (
                id SERIAL PRIMARY KEY,
                event_type VARCHAR(50) NOT NULL,
                ip_address INET,
                user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                details JSONB,
                severity VARCHAR(20) DEFAULT 'info',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
            CREATE TABLE IF NOT EXISTS blocked_ips (
                id SERIAL PRIMARY KEY,
                ip_address INET UNIQUE NOT NULL,
                reason TEXT,
                blocked_until TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
            CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
            CREATE INDEX IF NOT EXISTS idx_topics_category ON topics(category_id);
            CREATE INDEX IF NOT EXISTS idx_topics_user ON topics(user_id);
            CREATE INDEX IF NOT EXISTS idx_topics_created ON topics(created_at DESC);
            CREATE INDEX IF NOT EXISTS idx_replies_topic ON replies(topic_id);
            CREATE INDEX IF NOT EXISTS idx_replies_user ON replies(user_id);
            CREATE INDEX IF NOT EXISTS idx_replies_created ON replies(created_at DESC);
            CREATE INDEX IF NOT EXISTS idx_security_logs_created ON security_logs(created_at DESC);
            CREATE INDEX IF NOT EXISTS idx_security_logs_ip ON security_logs(ip_address);
            CREATE INDEX IF NOT EXISTS idx_user_activity_user ON user_activity(user_id);
            CREATE INDEX IF NOT EXISTS idx_user_activity_created ON user_activity(created_at DESC);

            -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            CREATE OR REPLACE FUNCTION update_updated_at_column()
            RETURNS TRIGGER AS $$
            BEGIN
                NEW.updated_at = CURRENT_TIMESTAMP;
                RETURN NEW;
            END;
            $$ language 'plpgsql';

            CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
            CREATE TRIGGER update_topics_updated_at BEFORE UPDATE ON topics FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
            CREATE TRIGGER update_replies_updated_at BEFORE UPDATE ON replies FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        `;

        await appPool.query(createTables);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã');

        // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await insertTestData(appPool);

        await appPool.end();
        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');

    } catch (error) {
        if (error.code === '42P04') {
            console.log('‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ...');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
};

const insertTestData = async (pool) => {
    try {
        // –í—Å—Ç–∞–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ–æ—Ä—É–º–∞
        const categories = [
            ['–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, CVE, —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ –∑–∞—â–∏—Ç—ã', '#ff0040', 'fas fa-bug'],
            ['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã', '–û–±–∑–æ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã', '#00ff41', 'fas fa-tools'],
            ['–°–µ—Ç–µ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'Firewall, IDS/IPS, –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞, –∑–∞—â–∏—Ç–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞', '#00d4ff', 'fas fa-network-wired'],
            ['–û–±—É—á–µ–Ω–∏–µ –∏ –∫–∞—Ä—å–µ—Ä–∞', '–ö—É—Ä—Å—ã, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ–≤–µ—Ç—ã –Ω–æ–≤–∏—á–∫–∞–º', '#8b5cf6', 'fas fa-graduation-cap'],
            ['–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏, blockchain, –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑', '#ffd700', 'fas fa-lock'],
            ['–ú–æ–±–∏–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å iOS/Android, –º–æ–±–∏–ª—å–Ω—ã–µ —É–≥—Ä–æ–∑—ã, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π', '#ff8800', 'fas fa-mobile-alt']
        ];

        for (const category of categories) {
            await pool.query(
                'INSERT INTO categories (name, description, color, icon) VALUES ($1, $2, $3, $4) ON CONFLICT DO NOTHING',
                category
            );
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const bcrypt = require('bcryptjs');
        const adminPassword = await bcrypt.hash('admin123!@#', 12);

        await pool.query(`
            INSERT INTO users (username, email, password_hash, role, email_verified, reputation) 
            VALUES ('AdminCyber', 'admin@cybersec-hub.com', $1, 'admin', true, 10000)
            ON CONFLICT (username) DO NOTHING
        `, [adminPassword]);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const testUsers = [
            ['SecurityExpert', 'expert@cybersec-hub.com', 'expert123!@#', 'moderator', 5000],
            ['WebHacker2023', 'hacker@cybersec-hub.com', 'hacker123!@#', 'user', 2500],
            ['ThreatHunter', 'hunter@cybersec-hub.com', 'hunter123!@#', 'user', 1800],
            ['SOCAnalyst', 'analyst@cybersec-hub.com', 'analyst123!@#', 'user', 900],
            ['CTFMaster', 'ctf@cybersec-hub.com', 'ctf123!@#', 'user', 3200]
        ];

        for (const user of testUsers) {
            const hashedPassword = await bcrypt.hash(user[2], 12);
            await pool.query(`
                INSERT INTO users (username, email, password_hash, role, email_verified, reputation) 
                VALUES ($1, $2, $3, $4, true, $5)
                ON CONFLICT (username) DO NOTHING
            `, [user[0], user[1], hashedPassword, user[3], user[4]]);
        }

        // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–º
        const topics = [
            [
                '–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä—É–º–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                '–û–±–Ω–æ–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä—É–º–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ –≤ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–æ—Å–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–∏–∫–µ –æ–±—â–µ–Ω–∏—è.',
                1, 1, true, false
            ],
            [
                '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ Apache Log4j 2.17.1',
                '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–æ–≤—É—é RCE —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Log4j. CVE-2023-44487 –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏.',
                2, 1, false, true
            ],
            [
                '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Burp Suite –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                '–ü–æ–¥–µ–ª—é—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Burp Suite –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–ª–∞–≥–∏–Ω—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é.',
                3, 2, false, false
            ],
            [
                '–ê–Ω–∞–ª–∏–∑ APT-–∞—Ç–∞–∫–∏ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É',
                '–†–∞–∑–±–∏—Ä–∞—é —Ä–µ–∞–ª—å–Ω—ã–π –∫–µ–π—Å APT-–∞—Ç–∞–∫–∏, –∫–æ—Ç–æ—Ä—É—é —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º TTPs, IOCs, –∏ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–æ–±–Ω—ã—Ö —É–≥—Ä–æ–∑.',
                4, 1, false, false
            ]
        ];

        for (const topic of topics) {
            await pool.query(`
                INSERT INTO topics (title, content, user_id, category_id, is_pinned, is_hot, views) 
                VALUES ($1, $2, $3, $4, $5, $6, $7)
                ON CONFLICT DO NOTHING
            `, [...topic, Math.floor(Math.random() * 1000) + 100]);
        }

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    setupDatabase();
}

module.exports = { setupDatabase }; 