// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const mobileMenuBtn = document.getElementById('mobile-menu-btn');
const mobileMenu = document.getElementById('mobile-menu');
const terminalInput = document.getElementById('terminal-input');
const terminalHistory = document.getElementById('terminal-history');

// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
mobileMenuBtn?.addEventListener('click', () => {
    mobileMenu.classList.toggle('hidden');
});

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        mobileMenu.classList.add('hidden');
    });
});

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
const terminalCommands = {
    help: () => {
        return `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  help     - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
  whoami   - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ls       - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  cat      - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  nmap     - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å
  clear    - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª
  date     - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
  pwd      - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  history  - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
  exit     - –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞`;
    },
    
    whoami: () => 'cybersec-user',
    
    ls: () => {
        return `drwxr-xr-x 2 user user 4096 Oct 15 10:30 .
drwxr-xr-x 3 user user 4096 Oct 15 10:30 ..
-rw-r--r-- 1 user user   42 Oct 15 10:30 flag.txt
-rwxr-xr-x 1 user user 8192 Oct 15 10:30 scan.sh
-rw-r--r-- 1 user user  256 Oct 15 10:30 passwords.txt
-rwxr-xr-x 1 user user 1024 Oct 15 10:30 exploit.py`;
    },
    
    cat: (args) => {
        const files = {
            'flag.txt': 'üö© CTF{w3lc0m3_t0_cyb3r_s3cur1ty_w0rld}',
            'passwords.txt': `admin:password123
user:qwerty
root:toor
test:test123
guest:guest`,
            'scan.sh': `#!/bin/bash
echo "Scanning network..."
nmap -sn 192.168.1.0/24
echo "Scan complete!"`
        };
        
        if (!args || args.length === 0) {
            return 'cat: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª';
        }
        
        const filename = args[0];
        if (files[filename]) {
            return files[filename];
        } else {
            return `cat: ${filename}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`;
        }
    },
    
    nmap: (args) => {
        const target = args && args.length > 0 ? args[0] : 'localhost';
        return `Starting Nmap scan on ${target}...

Nmap scan report for ${target}
Host is up (0.00050s latency).

PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
443/tcp  open  https
3306/tcp open  mysql

Nmap done: 1 IP address (1 host up) scanned in 2.45 seconds`;
    },
    
    clear: () => {
        terminalHistory.innerHTML = '';
        return '';
    },
    
    date: () => new Date().toLocaleString('ru-RU'),
    
    pwd: () => '/home/cybersec-user',
    
    history: () => {
        const commands = JSON.parse(localStorage.getItem('terminalHistory') || '[]');
        return commands.map((cmd, index) => `${index + 1}  ${cmd}`).join('\n') || '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞';
    },
    
    exit: () => {
        terminalInput.disabled = true;
        return '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.';
    }
};

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
function executeCommand(command) {
    const [cmd, ...args] = command.trim().split(' ');
    
    if (terminalCommands[cmd]) {
        return terminalCommands[cmd](args);
    } else if (cmd === '') {
        return '';
    } else {
        return `bash: ${cmd}: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
function saveCommandHistory(command) {
    const history = JSON.parse(localStorage.getItem('terminalHistory') || '[]');
    history.push(command);
    if (history.length > 50) {
        history.shift();
    }
    localStorage.setItem('terminalHistory', JSON.stringify(history));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
terminalInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
        const command = terminalInput.value.trim();
        if (command) {
            // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            const commandLine = document.createElement('div');
            commandLine.classList.add('mb-2');
            commandLine.innerHTML = `<span class="text-cyber-green">user@cybersec:</span><span class="text-cyber-blue">~$</span> <span class="text-white">${command}</span>`;
            terminalHistory.appendChild(commandLine);
            
            // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            const output = executeCommand(command);
            if (output) {
                const outputLine = document.createElement('div');
                outputLine.classList.add('text-gray-400', 'mb-2', 'whitespace-pre-line');
                outputLine.textContent = output;
                terminalHistory.appendChild(outputLine);
            }
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveCommandHistory(command);
            
            // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
            terminalInput.value = '';
            
            // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ –Ω–∏–∑—É
            terminalHistory.scrollTop = terminalHistory.scrollHeight;
        }
    }
});

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
function typeWriter(element, text, speed = 50) {
    let i = 0;
    const timer = setInterval(() => {
        if (i < text.length) {
            element.textContent += text.charAt(i);
            i++;
        } else {
            clearInterval(timer);
        }
    }, speed);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
function animateOnScroll() {
    const elements = document.querySelectorAll('.fade-in, .slide-in-left, .slide-in-right');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0) translateX(0)';
            }
        });
    });
    
    elements.forEach(element => {
        element.style.opacity = '0';
        if (element.classList.contains('slide-in-left')) {
            element.style.transform = 'translateX(-50px)';
        } else if (element.classList.contains('slide-in-right')) {
            element.style.transform = 'translateX(50px)';
        } else {
            element.style.transform = 'translateY(20px)';
        }
        observer.observe(element);
    });
}

// –ú–∞—Ç—Ä–∏—á–Ω—ã–π –¥–æ–∂–¥—å
function createMatrixRain() {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    canvas.style.position = 'fixed';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.pointerEvents = 'none';
    canvas.style.zIndex = '-1';
    canvas.style.opacity = '0.1';
    
    document.body.appendChild(canvas);
    
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    
    const matrix = "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()+={}[]|:;<>?";
    const drops = [];
    
    for (let x = 0; x < canvas.width / 10; x++) {
        drops[x] = 1;
    }
    
    function draw() {
        ctx.fillStyle = 'rgba(0, 0, 0, 0.04)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        ctx.fillStyle = '#00ff41';
        ctx.font = '10px monospace';
        
        for (let i = 0; i < drops.length; i++) {
            const text = matrix[Math.floor(Math.random() * matrix.length)];
            ctx.fillText(text, i * 10, drops[i] * 10);
            
            if (drops[i] * 10 > canvas.height && Math.random() > 0.975) {
                drops[i] = 0;
            }
            drops[i]++;
        }
    }
    
    setInterval(draw, 35);
}

// –≠—Ñ—Ñ–µ–∫—Ç –≥–ª–∏—Ç—á–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
function applyGlitchEffect() {
    const glitchElements = document.querySelectorAll('.glitch-text');
    
    glitchElements.forEach(element => {
        const text = element.textContent;
        element.setAttribute('data-text', text);
        
        setInterval(() => {
            if (Math.random() > 0.95) {
                element.style.animation = 'none';
                setTimeout(() => {
                    element.style.animation = 'glitch 2s infinite';
                }, 100);
            }
        }, 100);
    });
}

// –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function playSound(type) {
    const sounds = {
        keypress: () => {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = 800;
            oscillator.type = 'square';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
            
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.1);
        }
    };
    
    if (sounds[type]) {
        sounds[type]();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π
    animateOnScroll();
    applyGlitchEffect();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ –¥–æ–∂–¥—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // createMatrixRain();
    
    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    terminalInput?.addEventListener('keydown', () => {
        if (Math.random() > 0.7) {
            // playSound('keypress');
        }
    });
    
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª
    terminalInput?.focus();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    setTimeout(() => {
        if (terminalHistory) {
            const welcomeMessage = document.createElement('div');
            welcomeMessage.classList.add('text-cyber-green', 'mb-4');
            welcomeMessage.innerHTML = `
                <div class="mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CyberSec Hub Terminal!</div>
                <div class="text-gray-400">–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.</div>
            `;
            terminalHistory.appendChild(welcomeMessage);
        }
    }, 1000);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    initializeInteractiveEffects();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    addCardEffects();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    initializeSystemEffects();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
document.querySelectorAll('.cyber-btn').forEach(button => {
    button.addEventListener('click', function(e) {
        const text = this.textContent.trim();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
        if (text.includes('—Ç–µ—Ä–º–∏–Ω–∞–ª')) {
            if (this.getAttribute('href') === '#terminal') {
                e.preventDefault();
                document.getElementById('terminal-input')?.focus();
                document.getElementById('terminal-input')?.scrollIntoView({ behavior: 'smooth' });
            }
        } else if (text.includes('–∏–∑—É—á–µ–Ω–∏–µ')) {
            if (this.getAttribute('href') === '#about') {
                e.preventDefault();
                document.getElementById('about')?.scrollIntoView({ behavior: 'smooth' });
            }
        }
        
        // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        if (Math.random() > 0.5) {
            // playSound('click');
        }
    });
});

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function updateClock() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('ru-RU');
    
    // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç
    const clockElement = document.getElementById('terminal-clock');
    if (clockElement) {
        clockElement.textContent = timeString;
    }
}

setInterval(updateClock, 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
const contactForm = document.querySelector('form');
contactForm?.addEventListener('submit', (e) => {
    e.preventDefault();
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const submitBtn = contactForm.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>–û—Ç–ø—Ä–∞–≤–∫–∞...';
    submitBtn.disabled = true;
    
    setTimeout(() => {
        submitBtn.innerHTML = '<i class="fas fa-check mr-2"></i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!';
        submitBtn.classList.add('bg-green-600');
        
        setTimeout(() => {
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
            submitBtn.classList.remove('bg-green-600');
            contactForm.reset();
        }, 2000);
    }, 1500);
});

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫—É—Ä—Å–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç—ã
document.addEventListener('mousemove', (e) => {
    const cursor = document.querySelector('.custom-cursor');
    if (cursor) {
        cursor.style.left = e.clientX + 'px';
        cursor.style.top = e.clientY + 'px';
    }
});

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const cache = new Map();

function getCachedData(key, fetchFunction) {
    if (cache.has(key)) {
        return Promise.resolve(cache.get(key));
    }
    
    return fetchFunction().then(data => {
        cache.set(key, data);
        return data;
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const utils = {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    randomColor: () => {
        const colors = ['#00ff41', '#00d4ff', '#8b5cf6', '#ff0040'];
        return colors[Math.floor(Math.random() * colors.length)];
    },
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTime: (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    isMobile: () => {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
function initializeInteractiveEffects() {
    // –≠—Ñ—Ñ–µ–∫—Ç —Å–±–æ—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    const glitchElements = document.querySelectorAll('.digital-glitch');
    glitchElements.forEach(element => {
        element.addEventListener('mouseenter', () => {
            element.style.animation = 'digital-glitch-1 0.5s ease-in-out';
            setTimeout(() => {
                element.style.animation = '';
            }, 500);
        });
    });
    
    // –≠—Ñ—Ñ–µ–∫—Ç –º–µ—Ä—Ü–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const cyberBtns = document.querySelectorAll('.cyber-btn');
    cyberBtns.forEach(btn => {
        btn.addEventListener('mouseenter', () => {
            btn.classList.add('flicker');
            setTimeout(() => {
                btn.classList.remove('flicker');
            }, 1000);
        });
    });
    
    // –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    setInterval(() => {
        const flickerElements = document.querySelectorAll('.flicker');
        flickerElements.forEach(element => {
            if (Math.random() > 0.8) {
                element.style.animation = 'flicker 0.3s ease-in-out';
                setTimeout(() => {
                    element.style.animation = '';
                }, 300);
            }
        });
    }, 5000);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º
function addCardEffects() {
    const cards = document.querySelectorAll('.card-cyber');
    cards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if (!card.querySelector('.scan-effect')) {
                const scanEffect = document.createElement('div');
                scanEffect.className = 'scan-effect';
                scanEffect.style.cssText = `
                    position: absolute;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent, rgba(0, 255, 65, 0.2), transparent);
                    animation: scan 1s ease-in-out;
                    pointer-events: none;
                    z-index: 1;
                `;
                card.style.position = 'relative';
                card.appendChild(scanEffect);
                
                setTimeout(() => {
                    scanEffect.remove();
                }, 1000);
            }
        });
    });
}

// –°–∏—Å—Ç–µ–º–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
function initializeSystemEffects() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notifications = [
        'Firewall: Blocked suspicious connection',
        'Antivirus: Threat detected and quarantined',
        'IDS: Unusual traffic pattern detected',
        'System: Security update available',
        'VPN: Connection established',
        'Encryption: Files encrypted successfully',
        'Backup: System backup completed',
        'Scanner: Vulnerability scan finished'
    ];
    
    function createNotification() {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            border: 1px solid rgba(0, 255, 65, 0.5);
            border-radius: 5px;
            padding: 10px 15px;
            color: #00ff41;
            font-family: 'JetBrains Mono', monospace;
            font-size: 12px;
            z-index: 1000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            max-width: 300px;
        `;
        
        notification.textContent = notifications[Math.floor(Math.random() * notifications.length)];
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }
    
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10-20 —Å–µ–∫—É–Ω–¥
    setInterval(createNotification, 10000 + Math.random() * 10000);
    
    // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    setTimeout(() => {
        const loadingElements = document.querySelectorAll('.system-load');
        loadingElements.forEach(element => {
            element.style.animation = 'system-load-bar 2s ease-in-out';
        });
    }, 2000);
}

// –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
function typewriterEffect(element, text, speed = 50) {
    element.textContent = '';
    let i = 0;
    const timer = setInterval(() => {
        if (i < text.length) {
            element.textContent += text.charAt(i);
            i++;
        } else {
            clearInterval(timer);
        }
    }, speed);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ –¥–æ–∂–¥—è –≤ —Ñ–æ–Ω–µ
function createMatrixEffect() {
    const matrix = document.createElement('div');
    matrix.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
        overflow: hidden;
    `;
    
    const characters = '01';
    for (let i = 0; i < 100; i++) {
        const span = document.createElement('span');
        span.textContent = characters[Math.floor(Math.random() * characters.length)];
        span.style.cssText = `
            position: absolute;
            top: ${Math.random() * 100}%;
            left: ${Math.random() * 100}%;
            color: rgba(0, 255, 65, ${Math.random() * 0.5 + 0.1});
            font-family: 'JetBrains Mono', monospace;
            font-size: ${Math.random() * 20 + 10}px;
            animation: matrix-fall ${Math.random() * 10 + 5}s linear infinite;
        `;
        matrix.appendChild(span);
    }
    
    document.body.appendChild(matrix);
    
    // CSS –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
    const style = document.createElement('style');
    style.textContent = `
        @keyframes matrix-fall {
            0% { transform: translateY(-100vh); opacity: 0; }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { transform: translateY(100vh); opacity: 0; }
        }
    `;
    document.head.appendChild(style);
}

// –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
function enhanceTerminal() {
    const terminalInput = document.getElementById('terminal-input');
    if (terminalInput) {
        terminalInput.addEventListener('input', (e) => {
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ
            e.target.style.boxShadow = '0 0 10px rgba(0, 255, 65, 0.3)';
            setTimeout(() => {
                e.target.style.boxShadow = '';
            }, 500);
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.CyberSecHub = {
    utils,
    executeCommand,
    playSound,
    cache: getCachedData,
    typewriterEffect,
    createMatrixEffect,
    enhanceTerminal
}; 